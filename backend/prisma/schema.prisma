generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  HOMEOWNER
  CONTRACTOR
}

enum QuoteStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  DELAYED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  OVERDUE
}

model User {
  id        String              @id @default(cuid())
  email     String              @unique
  password  String
  name      String?
  role      Role                @default(HOMEOWNER)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  // relations
  contractorProfile ContractorProfile?
  projects          Project[]           @relation("HomeownerProjects")
  refreshToken      RefreshToken[]
}

model ContractorProfile {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  companyName String
  description String?
  services    String   // JSON string of services array
  logoUrl     String?
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // relations
  quotes      Quote[]
}

model Project {
  id          String   @id @default(cuid())
  homeowner   User     @relation("HomeownerProjects", fields: [homeownerId], references: [id])
  homeownerId String
  title       String
  description String?
  projectType String
  size        Float?   // mÂ²
  materials   String?  // materials preference
  budgetMin   Int?
  budgetMax   Int?
  predictedCost Int?   // from cost calculator
  status      String   @default("OPEN") // OPEN, IN_PROGRESS, COMPLETED, CANCELLED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // relations
  quotes      Quote[]
  milestones  Milestone[]
}

model Quote {
  id             String      @id @default(cuid())
  project        Project     @relation(fields: [projectId], references: [id])
  projectId      String
  contractor     ContractorProfile @relation(fields: [contractorId], references: [id])
  contractorId   String
  
  totalAmount    Int         // total quote amount
  laborHours     Float?
  laborCost      Int?
  materialsCost  Int?
  extrasCost     Int?
  notes          String?
  
  status         QuoteStatus @default(PENDING)
  validUntil     DateTime?   // quote expiry
  
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // relations
  lineItems      QuoteLineItem[]
  
  @@unique([projectId, contractorId]) // one quote per contractor per project
}

model QuoteLineItem {
  id          String @id @default(cuid())
  quote       Quote  @relation(fields: [quoteId], references: [id])
  quoteId     String
  
  category    String // "Labor", "Materials", "Equipment", etc.
  description String
  quantity    Float
  unitPrice   Int    // in cents
  totalPrice  Int    // quantity * unitPrice
  
  createdAt   DateTime @default(now())
}

model Milestone {
  id          String          @id @default(cuid())
  project     Project         @relation(fields: [projectId], references: [id])
  projectId   String
  
  title       String
  description String?
  order       Int             // milestone sequence
  status      MilestoneStatus @default(PENDING)
  
  scheduledDate DateTime?
  completedDate DateTime?
  
  // payment related
  paymentAmount Int?
  paymentStatus PaymentStatus @default(PENDING)
  
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}